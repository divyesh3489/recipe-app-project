1.What is Linting ?
-> Tool to check code formatting and syntax errors,formatting issues ,typos.

2.Testing ?
-> Django test suite, setup tests par django app  , run tests with docker compose. command to run tests is 'docker-compose run --rm app sh -c"python manage.py test"'

3.make project of django using docker and docker-compose  command is  'docker-compose run --rm app sh -c "django-admin.py startproject app ."'

4.what is github actions ?
-> Automation tool, Similar to Jenkins, CI/CD, Run jobs when code change,Automate tasks
-> common uses are testing, linting, building, deploying

5. How github actions work ?

-> Trigger Push to github -> Job Run unit tests -> Result Success/Fail

6. What is Docker Hub ?
-> Repository for docker images, Store and share images, Public and private repositories

7. Mocking ?
-> Replace real objects with fake objects, Test code in isolation, Test code that depends on external services

8. Django ORM ?
-> Object Relational Mapping, Python objects to database tables, Query database with python objects, Abstraction over SQL queries

    Define Models -> Genrate Migrations -> Setup Database -> Store Data 
9. What is a Model ?
-> Class that represents a database table, Define fields and methods, Define relationships between tables, Custom python logic

10. create a Migrations ?
-> Use Django CLI , Command is 'python manage.py makemigrations'

11. Apply Migrate ?
-> Use Django CLI , Command is 'python manage.py migrate' , apply migrations to database schema

12. create Custom User Model ?
-> Subclass AbstractBaseUser and PermissionsMixin , Define fields, Define methods, Define custom manager, Update settings.py, Update admin.py

13 AbstractBaseUser ?
-> Base class for custom user models, Provides core functionality, Subclass to create custom user models, Does not include fields like email, name
 
14 PermissionsMixin ?
-> Add permissions to custom user models, Provides methods to check permissions, Add permissions to custom user models, Check permissions in views,include default permissions and fields

15. Custom Manager ?
-> Custom methods to manage user objects, Create user, Create superuser, Filter users, Get users

16. BaseUserManager ?
-> Base class for custom user managers, Provides core functionality, Subclass to create custom user managers, Create user, Create superuser, Filter users, Get users

17. Customise Django Admin ?
-> Register models with admin, Define admin classes, Define list display, Define search fields, Define filters, Define ordering using BaseUserAdmin

18. BaseUserAdmin ?
-> Base class for custom admin classes, Provides core functionality, Subclass to create custom admin classes, Define list display, Define search fields, Define filters, Define ordering





